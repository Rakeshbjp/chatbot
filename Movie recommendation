import pandas as pd
from surprise import Dataset, Reader, KNNBasic
from surprise import accuracy
from surprise.model_selection import train_test_split

# Sample data
data_dict = {
    'user_id': [1, 1, 1, 2, 2, 2, 3, 3, 4, 4],
    'item_id': [1, 2, 3, 2, 3, 4, 1, 3, 1, 4],
    'rating': [5, 3, 4, 4, 5, 2, 2, 4, 4, 5]
}

# Create DataFrame
df = pd.DataFrame(data_dict)

# Define a reader with rating scale
reader = Reader(rating_scale=(1, 5))

# Load DataFrame into Surprise dataset
data = Dataset.load_from_df(df[['user_id', 'item_id', 'rating']], reader)

# Split the dataset into training and testing sets
trainset, testset = train_test_split(data, test_size=0.2)

# Use KNNBasic algorithm
algo = KNNBasic()

# Train the algorithm on the training set
algo.fit(trainset)

# Test the algorithm on the test set
predictions = algo.test(testset)

# Evaluate the performance
accuracy.rmse(predictions)

def get_top_n_recommendations(user_id, n=5):
    # Get a list of all item ids
    item_ids = df['item_id'].unique()
    
    # Get the items that the user has already rated
    user_rated_items = df[df['user_id'] == user_id]['item_id'].values
    
    # Predict ratings for all items not yet rated by the user
    predictions = [algo.predict(user_id, item_id) for item_id in item_ids if item_id not in user_rated_items]
    
    # Sort the predictions by estimated rating in descending order
    predictions.sort(key=lambda x: x.est, reverse=True)
    
    # Get the top N predictions
    top_n = predictions[:n]
    
    return [(pred.iid, pred.est) for pred in top_n]

# Get top 3 movie recommendations for user with user_id=1
user_id = 1
top_n_recommendations = get_top_n_recommendations(user_id, n=3)
print(f"Top {len(top_n_recommendations)} recommendations for user {user_id}: {top_n_recommendations}")
