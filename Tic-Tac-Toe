import math

# Define the Tic-Tac-Toe board
def create_board():
    return [[' ' for _ in range(3)] for _ in range(3)]

def print_board(board):
    for row in board:
        print('|'.join(row))
        print('-' * 5)

def is_moves_left(board):
    for row in board:
        if ' ' in row:
            return True
    return False

def evaluate(board):
    # Check rows for victory
    for row in board:
        if row[0] == row[1] == row[2] != ' ':
            return 10 if row[0] == 'X' else -10

    # Check columns for victory
    for col in range(3):
        if board[0][col] == board[1][col] == board[2][col] != ' ':
            return 10 if board[0][col] == 'X' else -10

    # Check diagonals for victory
    if board[0][0] == board[1][1] == board[2][2] != ' ':
        return 10 if board[0][0] == 'X' else -10
    if board[0][2] == board[1][1] == board[2][0] != ' ':
        return 10 if board[0][2] == 'X' else -10

    # No winner
    return 0

def is_winner(board, player):
    return evaluate(board) == (10 if player == 'X' else -10)def minimax(board, depth, is_max, alpha, beta):
    score = evaluate(board)

    # If the maximizer or minimizer has won the game, return the evaluated score
    if score == 10 or score == -10:
        return score

    # If there are no more moves and no winner, it is a tie
    if not is_moves_left(board):
        return 0

    if is_max:
        best = -math.inf
        for i in range(3):
            for j in range(3):
                if board[i][j] == ' ':
                    board[i][j] = 'X'
                    best = max(best, minimax(board, depth + 1, not is_max, alpha, beta))
                    board[i][j] = ' '
                    alpha = max(alpha, best)
                    if beta <= alpha:
                        break
        return best
    else:
        best = math.inf
        for i in range(3):
            for j in range(3):
                if board[i][j] == ' ':
                    board[i][j] = 'O'
                    best = min(best, minimax(board, depth + 1, not is_max, alpha, beta))
                    board[i][j] = ' '
                    beta = min(beta, best)
                    if beta <= alpha:
                        break
        return best

def find_best_move(board):
    best_val = -math.inf
    best_move = (-1, -1)

    for i in range(3):
        for j in range(3):
            if board[i][j] == ' ':
                board[i][j] = 'X'
                move_val = minimax(board, 0, False, -math.inf, math.inf)
                board[i][j] = ' '

                if move_val > best_val:
                    best_move = (i, j)
                    best_val = move_val

    return best_movedef player_move(board, player):
    while True:
        row, col = map(int, input("Enter row and column (0, 1, or 2): ").split())
        if 0 <= row <= 2 and 0 <= col <= 2 and board[row][col] == ' ':
            board[row][col] = player
            break
        else:
            print("Invalid move. Try again.")

def main():
    board = create_board()
    human_player = 'O'
    ai_player = 'X'

    while True:
        print_board(board)
        if is_winner(board, ai_player):
            print("AI wins!")
            break
        if is_winner(board, human_player):
            print("Human wins!")
            break
        if not is_moves_left(board):
            print("It's a tie!")
            break

        if human_player == 'O':
            player_move(board, human_player)
            if not is_moves_left(board) or is_winner(board, human_player):
                continue
            ai_move = find_best_move(board)
            board[ai_move[0]][ai_move[1]] = ai_player
        else:
            ai_move = find_best_move(board)
            board[ai_move[0]][ai_move[1]] = ai_player
            if not is_moves_left(board) or is_winner(board, ai_player):
                continue
            player_move(board, human_player)

if __name__ == "__main__":
    main()
